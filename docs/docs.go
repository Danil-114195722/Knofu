// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/token/obtain": {
            "post": {
                "security": [
                    {
                        "Refresh": []
                    }
                ],
                "description": "Obtain new accessToken with provided refreshToken in header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "Obtain token",
                "operationId": "token-obtain",
                "responses": {}
            }
        },
        "/token/verify": {
            "post": {
                "security": [
                    {
                        "JWT": []
                    }
                ],
                "description": "Verify accessToken sended in header",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "Verify token",
                "operationId": "token-verify",
                "responses": {}
            }
        },
        "/user/login": {
            "post": {
                "description": "Login existing user by email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Login user",
                "operationId": "user-login",
                "parameters": [
                    {
                        "description": "Login params",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/serializers.LoginUserIn"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/serializers.LoginUserOut"
                        }
                    },
                    "400": {
                        "description": "BadRequest (See ErrorsDeafultSchema in README.md)",
                        "schema": {}
                    },
                    "500": {
                        "description": "InternalServerError (See ErrorsDeafultSchema in README.md)",
                        "schema": {}
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Register new user with form",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Register user",
                "operationId": "user-register",
                "parameters": [
                    {
                        "description": "Register params",
                        "name": "registerRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/serializers.RegisterUserIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/serializers.RegisterUserOut"
                        }
                    },
                    "400": {
                        "description": "BadRequest (See ErrorsDeafultSchema in README.md)",
                        "schema": {}
                    },
                    "500": {
                        "description": "InternalServerError (See ErrorsDeafultSchema in README.md)",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "serializers.LoginUserIn": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty123"
                }
            }
        },
        "serializers.LoginUserOut": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "c73gnetfhigcsi.gaes4inva4a.gcawinxbwi4"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 4354
                },
                "lastName": {
                    "type": "string",
                    "example": "Lennon"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "ghvnkvg5ic73ea.hv567eke4n5.5ugkwe47hgv4"
                }
            }
        },
        "serializers.RegisterUserIn": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Lennon"
                },
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 8,
                    "example": "qwerty123"
                }
            }
        },
        "serializers.RegisterUserOut": {
            "type": "object",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "example": "c73gnetfhigcsi.gaes4inva4a.gcawinxbwi4"
                },
                "email": {
                    "type": "string",
                    "example": "user@example.com"
                },
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer",
                    "example": 4354
                },
                "lastName": {
                    "type": "string",
                    "example": "Lennon"
                },
                "refreshToken": {
                    "type": "string",
                    "example": "ghvnkvg5ic73ea.hv567eke4n5.5ugkwe47hgv4"
                }
            }
        }
    },
    "securityDefinitions": {
        "JWT": {
            "description": "JWT security accessToken. Please add it in the format \"Bearer {AccessToken}\" to authorize your requests.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        },
        "Refresh": {
            "description": "JWT security RefreshToken. Use it like \"Bearer {RefreshToken}\" to obtain new AccessToken.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/api",
	Schemes:          []string{"http"},
	Title:            "Knofu Go API",
	Description:      "This is a Knofu API written on Golang using Echo.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
